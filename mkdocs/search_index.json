{
    "docs": [
        {
            "location": "/",
            "text": "Json Model\n\n\nA Collection of Methods for Validating JSON Structured Data\n\nby \nCollective Acuity\n\n\n\n  \n\n    \n\n      \nDownloads\n\n      \nhttp://pypi.python.org/pypi/jsonModel\n\n    \n\n    \n\n      \nSource\n\n      \nhttps://github.com/collectiveacuity/jsonModel\n\n    \n\n    \n\n      \nDocumentation\n\n      \nhttps://collectiveacuity.github.io/jsonModel/\n\n    \n\n  \n\n\n\n\n\nIntroduction\n\n\nJson Model is designed to facilitate the process of implementing data validation against a declared json data model. jsonModel offers a more intuitive declaration process than other schema enforcement modules currently available by relying upon the architecture of json itself to validate datatypes, requirements and defaults.\n\n\nInstallation\n\n\nFrom PyPi::\n\n\n$ pip install jsonmodel\n\n\n\nFrom GitHub::\n\n\n$ git clone https://github.com/collectiveacuity/jsonmodel\n$ cd jsonmodel\n$ python setup.py install\n\n\n\nGetting Started\n\n\nThis module uses self-valid schema declarations as a method to describe data requirements. As a result, for many data models, full validation can be achieved from an example declaration using the schema key::\n\n\n{\n  \"schema\": {\n    \"userID\": \"gY3Cv81QwL0Fs\",\n    \"datetime\": 1456000345.543713,\n    \"active\": true,\n    \"address\": {\n      \"city\": \"New Orleans\",\n      \"region\": \"LA\",\n      \"postal_code\": \"\",\n      \"country\": \"United States\"\n    }\n  }\n}\n\n\n\n[In this model, the input must contain values for all four top level keys and each value must correspond to the datatype in the model. So, the input must have a userID field with a string, a datetime field with a number, an active key with a boolean and the address field must be a dictionary which itself contains city, region and country values. Since it is empty, postal_code is optional. If a value is provided for postal_code however, it must be a string.]\n\n\nIn addition to intuitive self-valid schema declarations, jsonModel also offers a rich way to further refine the conditionality of any property in the model through an accompanying components map whose key names correspond to the path to the schema property which requires additional validation::\n\n\n{\n  \"schema\": { ... },\n  \"components\": {\n    \".userID\": {\n      \"min_length\": 13,\n      \"max_length\": 13,\n      \"must_not_contain\": [ \"[^\\\\w]\", \"_\" ]\n    },\n    \".address.city\": {\n      \"discrete_values\": [ \"New Orleans\", \"New York\", \"Los Angeles\", \"Miami\" ],\n      \"required_field\": false\n    }\n  }\n}\n\n\n\n[In this model, the process of checking the inputs will also check the paths designated in the components dictionary to make sure that values do not violate any of the additional attributes of the property declared in the components. Whenever they may conflict with the attributes declared in the schema example, the conditions in the components map supersedes. So, in this case, the requirement that an address contain a city key-value has been turned off. But if a city is provided, it must match one of the four city values provided. Likewise, any value provided in userID must be no more than nor less than 13 characters long and can only be composed of alphanumerical characters.]\n\n\nThis module also validates the architecture of the model declarations themselves to facilitate the model design process and ensure that no models break the rules of the module. Error reports are provided to identity the scope of conditionals applicable to any given property in addition to the module documentation.\n\n\nTo declare the model::\n\n\n{\n    \"schema\": {\n        \"property\": \"value\"\n    },\n    \"components\": {},\n    \"title\": \"my cool data model\",\n    \"description\": \"model for performance analytics records of my sweet app\",\n    \"metadata\": { \"version\": \"1.1.1\" },\n    \"url\": \"https://collectiveacuity.com/api/mycoolresource?jsonmodel=true\",\n    \"max_size\": 1024,\n}\n\n\n\n[all fields except schema are optional]\n\n\nTo import the schema::\n\n\nimport json\n\nsample_schema = json.loads(open('sample-schema.json').read())\n\n\n\nTo initialize the class object::\n\n\nfrom jsonmodel.validators import jsonModel\n\nvalid_model = jsonModel(sample_schema)\n\n\n\nTo validate input against model declaration::\n\n\nvalid_model.validate(input)\n\n\n\nTo validate input against an individual component::\n\n\npath_to_root = '.property'\nvalid_model.validate(input, path_to_root)\n\n\n\nTo handle invalid inputs::\n\n\ntry:\n    valid_model.validate(invalid_input)\nexcept InputValidationError as err:\n    assert err.error['error_code'] > 4000\n\n\n\nTo customize error message:\n\n\ninput_title = 'Property field in input'\nvalid_model.validate(input, path_to_root, input_title)\n\n\n\nFurther Reading\n\n\nFor more details about how to use the jsonModel class, refer to the \njsonModel Class\n, \nReference\n and \nRoadmap\n pages.",
            "title": "Home"
        },
        {
            "location": "/#json-model",
            "text": "A Collection of Methods for Validating JSON Structured Data \nby  Collective Acuity  \n   \n     \n       Downloads \n       http://pypi.python.org/pypi/jsonModel \n     \n     \n       Source \n       https://github.com/collectiveacuity/jsonModel \n     \n     \n       Documentation \n       https://collectiveacuity.github.io/jsonModel/",
            "title": "Json Model"
        },
        {
            "location": "/#introduction",
            "text": "Json Model is designed to facilitate the process of implementing data validation against a declared json data model. jsonModel offers a more intuitive declaration process than other schema enforcement modules currently available by relying upon the architecture of json itself to validate datatypes, requirements and defaults.",
            "title": "Introduction"
        },
        {
            "location": "/#installation",
            "text": "From PyPi::  $ pip install jsonmodel  From GitHub::  $ git clone https://github.com/collectiveacuity/jsonmodel\n$ cd jsonmodel\n$ python setup.py install",
            "title": "Installation"
        },
        {
            "location": "/#getting-started",
            "text": "This module uses self-valid schema declarations as a method to describe data requirements. As a result, for many data models, full validation can be achieved from an example declaration using the schema key::  {\n  \"schema\": {\n    \"userID\": \"gY3Cv81QwL0Fs\",\n    \"datetime\": 1456000345.543713,\n    \"active\": true,\n    \"address\": {\n      \"city\": \"New Orleans\",\n      \"region\": \"LA\",\n      \"postal_code\": \"\",\n      \"country\": \"United States\"\n    }\n  }\n}  [In this model, the input must contain values for all four top level keys and each value must correspond to the datatype in the model. So, the input must have a userID field with a string, a datetime field with a number, an active key with a boolean and the address field must be a dictionary which itself contains city, region and country values. Since it is empty, postal_code is optional. If a value is provided for postal_code however, it must be a string.]  In addition to intuitive self-valid schema declarations, jsonModel also offers a rich way to further refine the conditionality of any property in the model through an accompanying components map whose key names correspond to the path to the schema property which requires additional validation::  {\n  \"schema\": { ... },\n  \"components\": {\n    \".userID\": {\n      \"min_length\": 13,\n      \"max_length\": 13,\n      \"must_not_contain\": [ \"[^\\\\w]\", \"_\" ]\n    },\n    \".address.city\": {\n      \"discrete_values\": [ \"New Orleans\", \"New York\", \"Los Angeles\", \"Miami\" ],\n      \"required_field\": false\n    }\n  }\n}  [In this model, the process of checking the inputs will also check the paths designated in the components dictionary to make sure that values do not violate any of the additional attributes of the property declared in the components. Whenever they may conflict with the attributes declared in the schema example, the conditions in the components map supersedes. So, in this case, the requirement that an address contain a city key-value has been turned off. But if a city is provided, it must match one of the four city values provided. Likewise, any value provided in userID must be no more than nor less than 13 characters long and can only be composed of alphanumerical characters.]  This module also validates the architecture of the model declarations themselves to facilitate the model design process and ensure that no models break the rules of the module. Error reports are provided to identity the scope of conditionals applicable to any given property in addition to the module documentation.  To declare the model::  {\n    \"schema\": {\n        \"property\": \"value\"\n    },\n    \"components\": {},\n    \"title\": \"my cool data model\",\n    \"description\": \"model for performance analytics records of my sweet app\",\n    \"metadata\": { \"version\": \"1.1.1\" },\n    \"url\": \"https://collectiveacuity.com/api/mycoolresource?jsonmodel=true\",\n    \"max_size\": 1024,\n}  [all fields except schema are optional]  To import the schema::  import json\n\nsample_schema = json.loads(open('sample-schema.json').read())  To initialize the class object::  from jsonmodel.validators import jsonModel\n\nvalid_model = jsonModel(sample_schema)  To validate input against model declaration::  valid_model.validate(input)  To validate input against an individual component::  path_to_root = '.property'\nvalid_model.validate(input, path_to_root)  To handle invalid inputs::  try:\n    valid_model.validate(invalid_input)\nexcept InputValidationError as err:\n    assert err.error['error_code'] > 4000  To customize error message:  input_title = 'Property field in input'\nvalid_model.validate(input, path_to_root, input_title)",
            "title": "Getting Started"
        },
        {
            "location": "/#further-reading",
            "text": "For more details about how to use the jsonModel class, refer to the  jsonModel Class ,  Reference  and  Roadmap  pages.",
            "title": "Further Reading"
        },
        {
            "location": "/jsonmodel/",
            "text": "jsonModel Class\n\n\nThe jsonModel class is the main class of the module. A jsonModel object must be initialized with a json-valid dictionary with the schema you wish to valid. When the object is initialized, it validates the architecture of the model declaration itself to facilitate the model design process and ensure that no models break the rules of the module. Once a valid model is constructed, input can then be fed to the class method \u2018validate\u2019 to determine whether the input is valid. Error reports are provided to identify the scope of conditionals applicable to any given property in addition to the module documentation.\n\n\nDeclare Schema\n\n\nSave in sample-schema.json::\n\n\n{\n    \"schema\": {\n        \"property\": \"value\"\n    },\n    \"components\": {},\n    \"title\": \"my cool data model\",\n    \"description\": \"model for performance analytics records of my sweet app\",\n    \"metadata\": { \"version\": \"1.1.1\" },\n    \"url\": \"https://collectiveacuity.com/api/mycoolresource?jsonmodel=true\",\n    \"max_size\": 1024,\n}\n\n\n\n[all fields except schema are optional]\n\n\nImport Schema\n\n\nTo import the schema::\n\n\nimport json\n\nsample_schema = json.loads(open('sample-schema.json').read())\n\n\n\nInitialize Model\n\n\nTo initialize the class object::\n\n\nfrom jsonmodel.validators import jsonModel\n\nvalid_model = jsonModel(sample_schema)\n\n\n\nValidate Input\n\n\nTo validate input against model declaration::\n\n\nvalid_model.validate(input)\n\n\n\nTo validate input against an individual component::\n\n\npath_to_root = '.property'\nvalid_model.validate(input, path_to_root)\n\n\n\nHandle Errors\n\n\nTo handle invalid inputs::\n\n\ntry:\n    valid_model.validate(invalid_input)\nexcept InputValidationError as err:\n    assert err.error['error_code'] > 4000\n\n\n\nTo customize error message:\n\n\ninput_title = 'Property field in input'\nvalid_model.validate(input, path_to_root, input_title)\n\n\n\nIngest Kwargs\n\n\nThis module also supports the ingestion of keyword arguments. The process of ingestion recursively walks the valid model searching for key-value pairs which match the keyword arguments of the input. For each match it finds, it constructs a key-value pair in the dictionary using the following rules (in order):\n\n\n\n\nValue in kwargs if field passes all its component validation tests\n\n\nDefault value declared for the key in the model\n\n\nEmpty value appropriate to datatype of key in the model\n\n\n\n\nAs a result, ingestion will produce an output which contains all the keys declared in the model. If there is a \ndefault value\n declared for each key in the model, it is also guaranteed to return a dictionary that will pass a model validation test. Extra keyword arguments are ignored unless extra fields is \nTrue\n in the model declaration.\n\n\nTo ingest kwargs::\n\n\noutput_dict = valid_model.ingest(**kwargs)\n\n\n\nTo produce a default record:\n\n\ndefault_dict = valid_model.ingest()\n\n\n\nQuery Records\n\n\nThe jsonModel class also supports record querying on model validated data. When the model is initialized, it constructs a set of operators that can be used to query records which contain data validated by the model. The set of valid operators and qualifiers which can be used to query records on each field depend upon its datatype. The query criteria for each field is the subset of the criteria that can be declared for that field in the components section of the model which can evaluate to \u2018true\u2019 against a value stored for that field in a record.\n\n\nThe built in query method supports any number of fields declared in the model as well as the maximum subset of query relevant criteria for each field based upon its datatype. But the model can also be initialized with a customized dictionary of rules for field datatypes based upon what is supported by a specific query engine.  In this way, the query method can be used as a bridge across multiple different database query languages (with a jsonModel valid record access object customized for applicable databases) or as a post-request filter for records stored in a way that does not support robust query criteria.\n\n\nTo declare query rules::\n\n\n{\n    \".string_fields\": {\n        \"must_contain\": []\n    }\n}\n\n\n\nTo initialize model with custom query rules::\n\n\nquery_rules = json.loads(open('query-rules.json').read())\n\nvalid_model = jsonModel(sample_model, query_rules)\n\n\n\nTo declare query criteria::\n\n\n{\n    '.property': {\n        'must_contain': [ 'v.+' ]\n    }\n}\n\n\n\nTo validate query criteria::\n\n\nvalid_model.query(sample_query)\n\n\n\nTo query a record using the criteria::\n\n\nvalid_input = valid_model.validate(input)\n\neval_outcome = valid_model.query(sample_query, valid_input)\nassert isinstance(eval_outcome, bool)",
            "title": "jsonModel Class"
        },
        {
            "location": "/jsonmodel/#jsonmodel-class",
            "text": "The jsonModel class is the main class of the module. A jsonModel object must be initialized with a json-valid dictionary with the schema you wish to valid. When the object is initialized, it validates the architecture of the model declaration itself to facilitate the model design process and ensure that no models break the rules of the module. Once a valid model is constructed, input can then be fed to the class method \u2018validate\u2019 to determine whether the input is valid. Error reports are provided to identify the scope of conditionals applicable to any given property in addition to the module documentation.",
            "title": "jsonModel Class"
        },
        {
            "location": "/jsonmodel/#declare-schema",
            "text": "Save in sample-schema.json::  {\n    \"schema\": {\n        \"property\": \"value\"\n    },\n    \"components\": {},\n    \"title\": \"my cool data model\",\n    \"description\": \"model for performance analytics records of my sweet app\",\n    \"metadata\": { \"version\": \"1.1.1\" },\n    \"url\": \"https://collectiveacuity.com/api/mycoolresource?jsonmodel=true\",\n    \"max_size\": 1024,\n}  [all fields except schema are optional]",
            "title": "Declare Schema"
        },
        {
            "location": "/jsonmodel/#import-schema",
            "text": "To import the schema::  import json\n\nsample_schema = json.loads(open('sample-schema.json').read())",
            "title": "Import Schema"
        },
        {
            "location": "/jsonmodel/#initialize-model",
            "text": "To initialize the class object::  from jsonmodel.validators import jsonModel\n\nvalid_model = jsonModel(sample_schema)",
            "title": "Initialize Model"
        },
        {
            "location": "/jsonmodel/#validate-input",
            "text": "To validate input against model declaration::  valid_model.validate(input)  To validate input against an individual component::  path_to_root = '.property'\nvalid_model.validate(input, path_to_root)",
            "title": "Validate Input"
        },
        {
            "location": "/jsonmodel/#handle-errors",
            "text": "To handle invalid inputs::  try:\n    valid_model.validate(invalid_input)\nexcept InputValidationError as err:\n    assert err.error['error_code'] > 4000  To customize error message:  input_title = 'Property field in input'\nvalid_model.validate(input, path_to_root, input_title)",
            "title": "Handle Errors"
        },
        {
            "location": "/jsonmodel/#ingest-kwargs",
            "text": "This module also supports the ingestion of keyword arguments. The process of ingestion recursively walks the valid model searching for key-value pairs which match the keyword arguments of the input. For each match it finds, it constructs a key-value pair in the dictionary using the following rules (in order):   Value in kwargs if field passes all its component validation tests  Default value declared for the key in the model  Empty value appropriate to datatype of key in the model   As a result, ingestion will produce an output which contains all the keys declared in the model. If there is a  default value  declared for each key in the model, it is also guaranteed to return a dictionary that will pass a model validation test. Extra keyword arguments are ignored unless extra fields is  True  in the model declaration.  To ingest kwargs::  output_dict = valid_model.ingest(**kwargs)  To produce a default record:  default_dict = valid_model.ingest()",
            "title": "Ingest Kwargs"
        },
        {
            "location": "/jsonmodel/#query-records",
            "text": "The jsonModel class also supports record querying on model validated data. When the model is initialized, it constructs a set of operators that can be used to query records which contain data validated by the model. The set of valid operators and qualifiers which can be used to query records on each field depend upon its datatype. The query criteria for each field is the subset of the criteria that can be declared for that field in the components section of the model which can evaluate to \u2018true\u2019 against a value stored for that field in a record.  The built in query method supports any number of fields declared in the model as well as the maximum subset of query relevant criteria for each field based upon its datatype. But the model can also be initialized with a customized dictionary of rules for field datatypes based upon what is supported by a specific query engine.  In this way, the query method can be used as a bridge across multiple different database query languages (with a jsonModel valid record access object customized for applicable databases) or as a post-request filter for records stored in a way that does not support robust query criteria.  To declare query rules::  {\n    \".string_fields\": {\n        \"must_contain\": []\n    }\n}  To initialize model with custom query rules::  query_rules = json.loads(open('query-rules.json').read())\n\nvalid_model = jsonModel(sample_model, query_rules)  To declare query criteria::  {\n    '.property': {\n        'must_contain': [ 'v.+' ]\n    }\n}  To validate query criteria::  valid_model.query(sample_query)  To query a record using the criteria::  valid_input = valid_model.validate(input)\n\neval_outcome = valid_model.query(sample_query, valid_input)\nassert isinstance(eval_outcome, bool)",
            "title": "Query Records"
        },
        {
            "location": "/reference/",
            "text": "Reference Materials\n\n\nDocumentation for model declaration and error handling for jsonModel validation\n\n\nSchema Default Behavior\n\n\nThe default behavior of a schema declaration includes validation of structure, datatype and requirements. Any of these defaults can be turned off in the specification of a property in the components map. However, for many purposes, the defaults will suffice to declare model property validation, eliminating the need for further specification in a components map.\n\n\nSchema Example\n::\n\n\n\"schema\": {\n    \"userID\": \"gY3Cv81QwL0Fs\",\n    \"datetime\": 1456000345.543713,\n    \"active\": true,\n    \"emoticon\": \"aGFwcHk=\",\n    \"rating\": 8,\n    \"reference\": null,\n    \"address\": {\n        \"city\": \"New Orleans\",\n        \"region\": \"LA\",\n        \"postal_code\": \"\",\n        \"country\": \"United States\",\n        \"country_code\": 0\n    },\n    \"comments\": [ \"@GerardMaras Rock the shrimp bouillabaisse!\" ]\n}\n\n\n\nDefault Settings\n\n\n\n\nStructure\n: The validation process will assume that a dictionary (including the top-level dictionary) defines its maximum scope of key names and that lists can contain any number of items. Lists cannot contain mixed datatypes and the first item in a list defines the allowable properties of each item in the list. For this reason, all lists declared in the model must also contain an item. So, the example model expects to find only the userID, datetime, active, emoticon, rating, address and comments fields and it will accept any number of strings in the comments list.\n\n\nDatatype\n: The validation process will assume that the datatype of each value in the input matches the datatype in the model. So, the example model expects to see a string for userID, a number for datetime, a boolean for active, etc\u2026 Special datatypes like bytes, integers and sets which json does not directly support must be handled by qualifiers in the components map.\n\n\nRequirements\n: The validation process will assume a key with a non-empty value is a required input. Since lists must declare an item, all lists are assumed to be required fields in the model. So, all fields in the example are required except postal_code and country_code. The empty value for each datatype can be expressed with {}, 0, 0.0, false or \u201c\u201d and indicates that it is optional.\n\n\n\n\nMeta-Model Restrictions\n\n\nA model validation error will occur if a key name in the schema contains an item designator pattern such as [2] or [35]. The module uses these patterns to validate inputs which contain lists of arbitrary size. As a result, there are limitations to the meta-model recursion of the module. It is not possible to use lists in model declarations which you wish to use as schemas in other model declarations.\n\n\nComponents Map\n\n\nThe default validation process can be modified, and other (less common) conditionals can be added through the components map of the model. Whereas the schema map provides a transparent data architecture that is self-valid, the components map can be used to specify the conditions of acceptable data for any number of fields in the schema. The component map is an optional flat dictionary where each key in the component map designates a particular path in the schema using the dot-path (\u2018.\u2019 and [0]) nomenclature of nesting and array identification.\n\n\nComponents Example\n::\n\n\n\"components\": {\n    \".\": {\n        \"extra_fields\": false\n    },\n    \".userID\": {\n        \"min_length\": 13,\n        \"max_length\": 13,\n        \"min_value\": \"1111111111111\",\n        \"max_value\": \"yyyyyyyyyyyyy\",\n        \"must_not_contain\": [ \"[^\\\\w]\", \"_\" ],\n        \"field_description\": \"13 digit unique base 64 url safe key\"\n    },\n    \".datetime\": {\n        \"greater_than\": 1.1,\n        \"less_than\": 2000000000.0,\n        \"field_position\": 1\n    },\n    \".emoticon\": {\n        \"required_field\": false,\n        \"byte_data\": true,\n        \"example_values\": [ \"aGFwcHk=\" ],\n        \"excluded_values\": [ \"c2Fk\" ],\n        \"field_metadata\": { \"endpoint\": \"http://collectiveacuity.com/icons/\" }\n    },\n    \".reference\": {\n        \"required_field\": false\n    },\n    \".rating\": {\n        \"required_field\": false,\n        \"min_value\": 1,\n        \"max_value\": 10,\n        \"default_value\": 5,\n        \"excluded_values\": [ 7, 9 ],\n        \"integer_data\": true\n    },\n    \".address.city\": {\n        \"discrete_values\": [ \"New Orleans\", \"New York\", \"Los Angeles\", \"Miami\" ],\n        \"required_field\": false,\n        \"default_value\": \"New York\"\n    },\n    \".address.region\":{\n        \"greater_than\": \"AB\",\n        \"less_than\": \"Yyyyyyyyyyyyyyyyyyyyyyyy\",\n        \"contains_either\": [ \"[A-Z]{2}\", \"[A-Z][a-z]+\" ],\n        \"field_title\": \"State or Province\"\n    },\n    \".address.country_code\":{\n        \"discrete_values\": [ 36, 124, 554, 826, 840 ],\n        \"integer_data\": true\n    },\n    \".comments\": {\n        \"required_field\": false,\n        \"min_size\": 1,\n        \"max_size\": 3,\n        \"unique_values\": true\n    }\n    \".comments[0]\": {\n        \"max_length\": 140,\n        \"must_contain\": [ \"[a-zA-Z]{2,}\" ],\n        \"example_values\": [ \"couldn't find the place\", \"hidden gem!!!!\" ]\n    }\n}\n\n\n\nPath Definitions\n\n\nTo validate additional conditionals placed on a property in the schema, the validation process looks through the schema for the value associated with a key or item specified in the key name of the components map. In this example, the key named \u201c.userID\u201d maps to the \u201cuserID\u201d key to be found in the top level map of the schema, \u201c.address.city\u201d refers to the \u201ccity\u201d key inside the \u201caddress\u201d map inside the schema map and \u201c.comments[0]\u201d refers to the first item inside the comments list.  Since the comments list is itself made optional by the declaration \u201crequired_field\u201d: false in the \u201c.comments\u201d key, this component is only validated if there is an item to validate. Otherwise, it is ignored. \u201c.\u201d is the key name for the top-level map itself and the \u201cextra_fields\u201d conditional changes the default to allow the top-level map to accept undeclared keys.\n\n\nList of Field Conditionals (and default values)\n\n\n\n\n\u201c\nvalue_datatype\n\u201d: \u201c\u201d / \nIMMUTABLE\n / the datatype of a value or item defined in the schema / error_code: 4001\n\n\n\u201c\nrequired_field\n\u201d: false / a true boolean requires this key-value in the input / error_code: 4002\n\n\n\u201c\nextra_fields\n\u201d: false / a true boolean allows map to contain undeclared keys / error_code: 4003 / [\nmaps only\n]\n\n\n\u201c\nkey_datatype\n\u201d: \u201cstring\u201d / \nIMMUTABLE\n / the datatype of a key name must be a string / error_code: 4004\n\n\n\u201c\nmaximum_scope\n\u201d: [] / \nIMMUTABLE\n / the maximum extent of keys allowed in a dictionary generated by extra_fields default / [\nmaps only\n]\n\n\n\u201c\ndeclared_value\n\u201d: null / \nIMMUTABLE\n / the value or item defined in the schema [\nstrings, numbers and booleans only\n]\n\n\n\u201c\ndefault_value\n\u201d: null / a value for an optional property when field is missing in input [\nstrings, numbers and booleans only\n]\n\n\n\u201c\nbyte_data\n\u201d: false / a true boolean expects to see base64 byte data in the string field / error_code: 4011 [\nstrings only\n]\n\n\n\u201c\nmin_length\n\u201d: 0 / the minimum number of characters in a string / error_code: 4012 [\nstrings only\n]\n\n\n\u201c\nmax_length\n\u201d: 0 / the maximum number of characters in a string / error_code: 4013 [\nstrings only\n]\n\n\n\u201c\nmust_not_contain\n\u201d: [] / a list of regular expressions which should not be found in a string / error_code: 4014 [\nstrings only\n]\n\n\n\u201c\nmust_contain\n\u201d: [] / a list of regular expressions which must be found in a string / error_code: 4015 [\nstrings only\n]\n\n\n\u201c\ncontains_either\n\u201d: [] / a list of regular expressions which string must match at least one / error_code: 4016 [\nstrings only\n]\n\n\n\u201c\ninteger_data\n\u201d: false / a true boolean requires number to be an integer / error_code: 4021 [\nnumbers only\n]\n\n\n\u201c\nmin_value\n\u201d: 0.0 or \u201c\u201d / the minimum value of a number or string / error_code: 4022 [\nnumbers and strings only\n]\n\n\n\u201c\nmax_value\n\u201d: 0.0 or \u201c\u201d / the maximum value of a number or string / error_code: 4023 [\nnumbers and strings only\n]\n\n\n\u201c\ngreater_than\n\u201d: 0.0 or \u201c\u201d / the value a number or string must be greater than / error_code: 4024 [\nnumbers and strings only\n]\n\n\n\u201c\nless_than\n\u201d: 0.0 or \u201c\u201d / the value a number or string must be less than / error_code: 4025 [\nnumbers and strings only\n]\n\n\n\u201c\nmin_size\n\u201d: 0 / the minimum number of items in a list / error_code: 4031 / [\nlists only\n]\n\n\n\u201c\nmax_size\n\u201d: 0 / the maximum number of items in a list / error_code: 4032 / [\nlists only\n]\n\n\n\u201c\nunique_values\n\u201d: false / a true boolean treats a list as a set of unique primitives with no duplication / error_code: 4033 [\nlists of strings and numbers only\n]\n\n\n\u201c\ndiscrete_values\n\u201d: [] / a list of values allowed / error_code: 4041 [\nnumbers and strings only\n]\n\n\n\u201c\nidentical_to\n\u201d: \u201c\u201d / \nTODO\n / the key name in the components map whose value the value of this component must match\n\n\n\u201c\nlambda_function\n\u201d: \u201c\u201d / \nTODO\n / a single argument function which should be run to validate the value of this component, lambda_function must return true (valid) or false (invalid)\n\n\n\u201c\nvalidation_url\n\u201d: \u201c\u201d / \nTODO\n / an uri which can be called to validate the value of this component with its input in the body of the request, uri response must return true (valid) or false (invalid)\n\n\n\u201c\nexample_values\n\u201d: [] / a list of values which satisfy all the validation requirements [\nnumbers and strings only\n]\n\n\n\u201c\nfield_title\n\u201d: \u201c\u201d / the title of the component for documentation and error reporting\n\n\n\u201c\nfield_description\n\u201d: \u201c\u201d / a description of the component for documentation and error reporting\n\n\n\u201c\nfield_position\n\u201d: 0 / the position of the component in an ordered array of fields\n\n\n\u201c\nfield_metadata\n\u201d: {} / a dictionary for metadata about the component that passes through validation check\n\n\n\n\nError Handling\n\n\nErrors created from improper model specification will raise a ModelValidationError with a message that is designed to help determine the source of the model declaration error. To ensure that model initialization occurs properly, no error encoding is included to handle these exceptions. However, it is expected that validation of inputs will produce errors. Otherwise, what\u2019s the point?! So, in addition to a text report, a dictionary has been included with the InputValidationError exception to facilitate error handling.\n\n\nError Method Example\n::\n\n\nself.error = {\n    'model_schema': {\n        'datetime': 1456190345.543713,\n        'address': {\n            'country_code': 0,\n            'city': 'New Orleans',\n            'postal_code': '',\n            'region': 'LA',\n            'country': 'United States'\n        },\n        'comments': [ '@GerardMaras Rock the shrimp bouillabaisse!' ],\n        'active': True,\n        'rating': 8,\n        'reference': None,\n        'userID': 'gY3Cv81QwL0Fs',\n        'emoticon': 'aGFwcHk=',\n    },\n    'input_path': '.',\n    'input_criteria': {\n        'required_field': True,\n        'value_datatype': 'map',\n        'maximum_scope': [ 'datetime', 'address', 'active', 'userID', 'comments', 'rating', 'emoticon' ],\n        'extra_fields': False\n    },\n    'failed_test': 'extra_fields',\n    'error_value': 'extraKey',\n    'error_code': 4003\n}\n\n\n\nOrder of Exceptions\n\n\nThe validation process will raise an error as soon as it encounters one, so there is no guarantee that the error that is reported is the only error in the input. Since there is no set order to the keys in a dictionary, there is also no guaranteed a priori order to the evaluation process. However below is an overview of the order of the steps of the validation process:\n\n\nStructure:\n\n\n\n\n\n\nInput is a dictionary\n\n\nRequired keys in the input\n\n\nExtra keys in the input\n\n\nValue of each key in the input (recursive) \n(see below)\n\n\nInject default values for missing optional keys\n\n\n\n\nValues (or Items):\n\n\n\n\n\n\nDatatype of value\n\n\nOther value qualifiers based upon datatype\n\n\nIdentity, Lambda and URL qualifiers # \nTODO\n\n\n\n\nTo help the process of error handling and client-server negotiation, both the schema for the model as well as the the map of conditional qualifiers for the field that raised the error are included in the error dictionary.\n\n\nIngesting Kwargs\n\n\nThe process of ingestion recursively walks the valid model searching for key-value pairs which match the keyword arguments of the input. For each match it finds, it constructs a key-value pair in the dictionary using the following rules (in order):\n\n\n\n\nValue in kwargs if field passes all its component validation tests\n\n\nDefault value declared for the key in the model\n\n\nEmpty value appropriate to datatype of key in the model\n\n\n\n\nLike the core validation method, ingestion will also walk through each item in a list field of the kwargs if the item type itself is also a list or dictionary. However, because invalid data will be replaced by empty values appropriate to the datatype declared in the model, unlike the core validation model, output data from ingest may not be model valid data. If it is desirable to ensure that the data is valid, a \u2018default_value\u2019 should be declared for each key in the components section of the data model and the \u2018min_size\u2019 of each list declaration should only be set to 0.\n\n\nSample Kwargs\n::\n\n\n{\n    \"userID\": \"6nPbM9gTwLz3f\",\n    \"datetime\": 1449179763.312077,\n    \"active\": false,\n    \"emoticon\": \"aGFwcHIk=\",\n    \"comments\": [ \"gold\", \"silver\", \"bronze\", \"pewter\" ],\n    \"address\": {\n        \"region\": \"NY\",\n        \"country\": \"United States\"\n  }\n}\n\n\n\nIngest Sample\n::\n\n\noutput = jsonModel.ingest(**sample_kwargs)\n\n\n\nSample Output\n::\n\n\n{\n    'userID': '6nPbM9gTwLz3f',\n    'datetime': 1449179763.312077,\n    'active': False,\n    'rating': 5,\n    'reference': None,\n    'emoticon': 'aGFwcHIk='\n    'comments': ['gold', 'silver', 'bronze'],\n    'address': {\n        'postal_code': '',\n        'city': 'New York',\n        'country_code': 0,\n        'region': 'NY',\n        'country': 'United States'\n    }\n}\n\n\n\nIngest Empty\n::\n\n\noutput = jsonModel.ingest(**{})\n\n\n\nEmpty Output\n::\n\n\n{\n    'userID': '',\n    'datetime': 0.0,\n    'active': False,\n    'rating': 5,\n    'reference': None,\n    'emoticon': ''\n    'comments': [],\n    'address': {\n        'postal_code': '',\n        'city': 'New York',\n        'country_code': 0,\n        'region': '',\n        'country': ''\n    }\n}\n\n\n\nExtra Keywords\n\n\nIf \u2018extra_fields\u2019 is declared True in the components for a dictionary in the model, then any extraneous keys in the corresponding dictionary in the kwargs will be added to the output.\n\n\nToo Many Items\n\n\nItems are only added to a list from those items in kwargs if they are valid. If the number of valid items in a list in the kwargs exceeds the \u2018max_size\u2019 of the corresponding list in the model, then subsequent items are not added to the list once the list reaches its maximum size.\n\n\nQuery Criteria\n\n\nQuery criteria are composed of a dictionary of one or more key-value pairs, where the key names are the dot path to the fields in the model schema to be queried and the values are dictionaries containing all the conditional operators for the query on the respective fields. Query criteria can be simple, such as the single field, operator and qualifier in the README documentation, or elaborate, such as found in the provided model sample-query.json below:\n\n\nSample Query\n::\n\n\n{\n  \".address.city\": {\n    \"discrete_values\": [ \"New Orleans\", \"New York\", \"Los Angeles\", \"Miami\"]\n  },\n  \".address.country_code\": {\n    \"discrete_values\": [36, 124, 554, 826, 840],\n    \"integer_data\": true\n  },\n  \".address.region\": {\n    \"contains_either\": [\"[A-Z]{2}\", \"[A-Z][a-z]+\"],\n    \"greater_than\": \"AB\",\n    \"less_than\": \"Yyyyyyyyyyyyyyyyyyyyyyyy\"\n  },\n  \".comments\": {\n    \"max_size\": 3,\n    \"min_size\": 1,\n    \"unique_values\": true\n  },\n  \".comments[0]\": {\n    \"max_length\": 140,\n    \"must_contain\": [\"[a-zA-Z]{2,}\"]\n  },\n  \".datetime\": {\n    \"greater_than\": 1.1,\n    \"less_than\": 2000000000.0\n  },\n  \".emoticon\": {\n    \"byte_data\": true,\n    \"excluded_values\": [\"c2Fk\"]\n  },\n  \".rating\": {\n    \"excluded_values\": [7, 9],\n    \"integer_data\": true,\n    \"max_value\": 10,\n    \"min_value\": 1\n  },\n  \".userID\": {\n    \"max_length\": 13,\n    \"max_value\": \"yyyyyyyyyyyyy\",\n    \"min_length\": 13,\n    \"min_value\": \"1111111111111\",\n    \"must_not_contain\": [\"[^\\\\w]\", \"_\"]\n  }\n}\n\n\n\nThe query method follows a similar process by which input is validated. A record whose field values evaluate to true for all criteria returns true. Otherwise, something in the record does not match one or more query criteria and the query method returns false. Because the query method returns a false as soon as it encounters a failed criteria from a dictionary of fields in the query criteria, query time will vary based upon the number of records, how many fail and how many fields are added to the query criteria.\n\n\nQuerying Items\n\n\nAlthough the query method will evaluate items nested inside lists to an arbitrary depth, it does so by evaluating all items in the list and all sub-branches of any nested lists inside the list. As a result, querying items inside lists suffers non-linear explosion. And, unlike the process of item ingestion, if any item in a list (or branch of a sub-list) fails to evaluate to true to a criteria in the query, the entire record will return false. \nBe Warned\n\n\nQuery Errors\n\n\nIf query criteria contain fields, operators or qualifiers which are outside the scope of the model, the query method will produce a QueryValidationError.\n\n\nTo handle a QueryValidationError::\n\n\ntry:\n    query_results = validModel.query(invalid_criteria, test_record)\nexcept QueryValidationError as err:\n    assert isinstance(err.error['message'], str)\n\n\n\nQuery Rules Customization\n\n\nWhen the model is initialized, it accepts an optional dictionary for customized query rules. The primary purpose of this customization is to limit query criteria validation to only those query operations which are supported by a specific query engine. Optional query rules must be structured according to the components field of the model-rules.json file and cannot contain any fields, operators or qualifiers outside the full range of the model query rules.\n\n\nQuery Rules\n::\n\n\n{\n  \".boolean_fields\": {\n    \"identical_to\": \".similar_boolean\",\n    \"lambda_function\": \"\",\n    \"validation_url\": \"\",\n    \"value_exists\": false\n  },\n \".list_fields\": {\n    \"identical_to\": \".similar_list\",\n    \"lambda_function\": \"\",\n    \"max_size\": 0,\n    \"min_size\": 0,\n    \"unique_values\": false,\n    \"validation_url\": \"\",\n    \"value_exists\": false\n },\n \".map_fields\": {\n    \"identical_to\": \".similar_map\",\n    \"lambda_function\": \"\",\n    \"validation_url\": \"\",\n    \"value_exists\": false\n },\n \".null_fields\": {\n    \"identical_to\": \".similar_null\",\n    \"lambda_function\": \"\",\n    \"validation_url\": \"\",\n    \"value_exists\": false\n },\n \".number_fields\": {\n    \"discrete_values\": [],\n    \"excluded_values\": [],\n    \"greater_than\": 0.0,\n    \"identical_to\": \".similar_number\",\n    \"integer_data\": false,\n    \"lambda_function\": \"\",\n    \"less_than\": 0.0,\n    \"max_value\": 0.0,\n    \"min_value\": 0.0,\n    \"validation_url\": \"\",\n    \"value_exists\": false\n },\n  \".string_fields\": {\n    \"byte_data\": false,\n    \"contains_either\": [],\n    \"discrete_values\": [],\n    \"excluded_values\": [],\n    \"greater_than\": \"\",\n    \"identical_to\": \".similar_string\",\n    \"lambda_function\": \"\",\n    \"less_than\": \"\",\n    \"max_length\": 0,\n    \"max_value\": \"\",\n    \"min_length\": 0,\n    \"min_value\": \"\",\n    \"must_contain\": [],\n    \"must_not_contain\": [],\n    \"validation_url\": \"\",\n    \"value_exists\": false\n  }\n}\n\n\n\n[The lambda_function, identical_to and validation_url operators are not yet supported by the model.]\n\n\nA malformed query rules argument on model initialization will produce a ModelValidationError.",
            "title": "Reference"
        },
        {
            "location": "/reference/#reference-materials",
            "text": "Documentation for model declaration and error handling for jsonModel validation",
            "title": "Reference Materials"
        },
        {
            "location": "/reference/#schema-default-behavior",
            "text": "The default behavior of a schema declaration includes validation of structure, datatype and requirements. Any of these defaults can be turned off in the specification of a property in the components map. However, for many purposes, the defaults will suffice to declare model property validation, eliminating the need for further specification in a components map.  Schema Example ::  \"schema\": {\n    \"userID\": \"gY3Cv81QwL0Fs\",\n    \"datetime\": 1456000345.543713,\n    \"active\": true,\n    \"emoticon\": \"aGFwcHk=\",\n    \"rating\": 8,\n    \"reference\": null,\n    \"address\": {\n        \"city\": \"New Orleans\",\n        \"region\": \"LA\",\n        \"postal_code\": \"\",\n        \"country\": \"United States\",\n        \"country_code\": 0\n    },\n    \"comments\": [ \"@GerardMaras Rock the shrimp bouillabaisse!\" ]\n}",
            "title": "Schema Default Behavior"
        },
        {
            "location": "/reference/#default-settings",
            "text": "Structure : The validation process will assume that a dictionary (including the top-level dictionary) defines its maximum scope of key names and that lists can contain any number of items. Lists cannot contain mixed datatypes and the first item in a list defines the allowable properties of each item in the list. For this reason, all lists declared in the model must also contain an item. So, the example model expects to find only the userID, datetime, active, emoticon, rating, address and comments fields and it will accept any number of strings in the comments list.  Datatype : The validation process will assume that the datatype of each value in the input matches the datatype in the model. So, the example model expects to see a string for userID, a number for datetime, a boolean for active, etc\u2026 Special datatypes like bytes, integers and sets which json does not directly support must be handled by qualifiers in the components map.  Requirements : The validation process will assume a key with a non-empty value is a required input. Since lists must declare an item, all lists are assumed to be required fields in the model. So, all fields in the example are required except postal_code and country_code. The empty value for each datatype can be expressed with {}, 0, 0.0, false or \u201c\u201d and indicates that it is optional.",
            "title": "Default Settings"
        },
        {
            "location": "/reference/#meta-model-restrictions",
            "text": "A model validation error will occur if a key name in the schema contains an item designator pattern such as [2] or [35]. The module uses these patterns to validate inputs which contain lists of arbitrary size. As a result, there are limitations to the meta-model recursion of the module. It is not possible to use lists in model declarations which you wish to use as schemas in other model declarations.",
            "title": "Meta-Model Restrictions"
        },
        {
            "location": "/reference/#components-map",
            "text": "The default validation process can be modified, and other (less common) conditionals can be added through the components map of the model. Whereas the schema map provides a transparent data architecture that is self-valid, the components map can be used to specify the conditions of acceptable data for any number of fields in the schema. The component map is an optional flat dictionary where each key in the component map designates a particular path in the schema using the dot-path (\u2018.\u2019 and [0]) nomenclature of nesting and array identification.  Components Example ::  \"components\": {\n    \".\": {\n        \"extra_fields\": false\n    },\n    \".userID\": {\n        \"min_length\": 13,\n        \"max_length\": 13,\n        \"min_value\": \"1111111111111\",\n        \"max_value\": \"yyyyyyyyyyyyy\",\n        \"must_not_contain\": [ \"[^\\\\w]\", \"_\" ],\n        \"field_description\": \"13 digit unique base 64 url safe key\"\n    },\n    \".datetime\": {\n        \"greater_than\": 1.1,\n        \"less_than\": 2000000000.0,\n        \"field_position\": 1\n    },\n    \".emoticon\": {\n        \"required_field\": false,\n        \"byte_data\": true,\n        \"example_values\": [ \"aGFwcHk=\" ],\n        \"excluded_values\": [ \"c2Fk\" ],\n        \"field_metadata\": { \"endpoint\": \"http://collectiveacuity.com/icons/\" }\n    },\n    \".reference\": {\n        \"required_field\": false\n    },\n    \".rating\": {\n        \"required_field\": false,\n        \"min_value\": 1,\n        \"max_value\": 10,\n        \"default_value\": 5,\n        \"excluded_values\": [ 7, 9 ],\n        \"integer_data\": true\n    },\n    \".address.city\": {\n        \"discrete_values\": [ \"New Orleans\", \"New York\", \"Los Angeles\", \"Miami\" ],\n        \"required_field\": false,\n        \"default_value\": \"New York\"\n    },\n    \".address.region\":{\n        \"greater_than\": \"AB\",\n        \"less_than\": \"Yyyyyyyyyyyyyyyyyyyyyyyy\",\n        \"contains_either\": [ \"[A-Z]{2}\", \"[A-Z][a-z]+\" ],\n        \"field_title\": \"State or Province\"\n    },\n    \".address.country_code\":{\n        \"discrete_values\": [ 36, 124, 554, 826, 840 ],\n        \"integer_data\": true\n    },\n    \".comments\": {\n        \"required_field\": false,\n        \"min_size\": 1,\n        \"max_size\": 3,\n        \"unique_values\": true\n    }\n    \".comments[0]\": {\n        \"max_length\": 140,\n        \"must_contain\": [ \"[a-zA-Z]{2,}\" ],\n        \"example_values\": [ \"couldn't find the place\", \"hidden gem!!!!\" ]\n    }\n}",
            "title": "Components Map"
        },
        {
            "location": "/reference/#path-definitions",
            "text": "To validate additional conditionals placed on a property in the schema, the validation process looks through the schema for the value associated with a key or item specified in the key name of the components map. In this example, the key named \u201c.userID\u201d maps to the \u201cuserID\u201d key to be found in the top level map of the schema, \u201c.address.city\u201d refers to the \u201ccity\u201d key inside the \u201caddress\u201d map inside the schema map and \u201c.comments[0]\u201d refers to the first item inside the comments list.  Since the comments list is itself made optional by the declaration \u201crequired_field\u201d: false in the \u201c.comments\u201d key, this component is only validated if there is an item to validate. Otherwise, it is ignored. \u201c.\u201d is the key name for the top-level map itself and the \u201cextra_fields\u201d conditional changes the default to allow the top-level map to accept undeclared keys.",
            "title": "Path Definitions"
        },
        {
            "location": "/reference/#list-of-field-conditionals-and-default-values",
            "text": "\u201c value_datatype \u201d: \u201c\u201d /  IMMUTABLE  / the datatype of a value or item defined in the schema / error_code: 4001  \u201c required_field \u201d: false / a true boolean requires this key-value in the input / error_code: 4002  \u201c extra_fields \u201d: false / a true boolean allows map to contain undeclared keys / error_code: 4003 / [ maps only ]  \u201c key_datatype \u201d: \u201cstring\u201d /  IMMUTABLE  / the datatype of a key name must be a string / error_code: 4004  \u201c maximum_scope \u201d: [] /  IMMUTABLE  / the maximum extent of keys allowed in a dictionary generated by extra_fields default / [ maps only ]  \u201c declared_value \u201d: null /  IMMUTABLE  / the value or item defined in the schema [ strings, numbers and booleans only ]  \u201c default_value \u201d: null / a value for an optional property when field is missing in input [ strings, numbers and booleans only ]  \u201c byte_data \u201d: false / a true boolean expects to see base64 byte data in the string field / error_code: 4011 [ strings only ]  \u201c min_length \u201d: 0 / the minimum number of characters in a string / error_code: 4012 [ strings only ]  \u201c max_length \u201d: 0 / the maximum number of characters in a string / error_code: 4013 [ strings only ]  \u201c must_not_contain \u201d: [] / a list of regular expressions which should not be found in a string / error_code: 4014 [ strings only ]  \u201c must_contain \u201d: [] / a list of regular expressions which must be found in a string / error_code: 4015 [ strings only ]  \u201c contains_either \u201d: [] / a list of regular expressions which string must match at least one / error_code: 4016 [ strings only ]  \u201c integer_data \u201d: false / a true boolean requires number to be an integer / error_code: 4021 [ numbers only ]  \u201c min_value \u201d: 0.0 or \u201c\u201d / the minimum value of a number or string / error_code: 4022 [ numbers and strings only ]  \u201c max_value \u201d: 0.0 or \u201c\u201d / the maximum value of a number or string / error_code: 4023 [ numbers and strings only ]  \u201c greater_than \u201d: 0.0 or \u201c\u201d / the value a number or string must be greater than / error_code: 4024 [ numbers and strings only ]  \u201c less_than \u201d: 0.0 or \u201c\u201d / the value a number or string must be less than / error_code: 4025 [ numbers and strings only ]  \u201c min_size \u201d: 0 / the minimum number of items in a list / error_code: 4031 / [ lists only ]  \u201c max_size \u201d: 0 / the maximum number of items in a list / error_code: 4032 / [ lists only ]  \u201c unique_values \u201d: false / a true boolean treats a list as a set of unique primitives with no duplication / error_code: 4033 [ lists of strings and numbers only ]  \u201c discrete_values \u201d: [] / a list of values allowed / error_code: 4041 [ numbers and strings only ]  \u201c identical_to \u201d: \u201c\u201d /  TODO  / the key name in the components map whose value the value of this component must match  \u201c lambda_function \u201d: \u201c\u201d /  TODO  / a single argument function which should be run to validate the value of this component, lambda_function must return true (valid) or false (invalid)  \u201c validation_url \u201d: \u201c\u201d /  TODO  / an uri which can be called to validate the value of this component with its input in the body of the request, uri response must return true (valid) or false (invalid)  \u201c example_values \u201d: [] / a list of values which satisfy all the validation requirements [ numbers and strings only ]  \u201c field_title \u201d: \u201c\u201d / the title of the component for documentation and error reporting  \u201c field_description \u201d: \u201c\u201d / a description of the component for documentation and error reporting  \u201c field_position \u201d: 0 / the position of the component in an ordered array of fields  \u201c field_metadata \u201d: {} / a dictionary for metadata about the component that passes through validation check",
            "title": "List of Field Conditionals (and default values)"
        },
        {
            "location": "/reference/#error-handling",
            "text": "Errors created from improper model specification will raise a ModelValidationError with a message that is designed to help determine the source of the model declaration error. To ensure that model initialization occurs properly, no error encoding is included to handle these exceptions. However, it is expected that validation of inputs will produce errors. Otherwise, what\u2019s the point?! So, in addition to a text report, a dictionary has been included with the InputValidationError exception to facilitate error handling.  Error Method Example ::  self.error = {\n    'model_schema': {\n        'datetime': 1456190345.543713,\n        'address': {\n            'country_code': 0,\n            'city': 'New Orleans',\n            'postal_code': '',\n            'region': 'LA',\n            'country': 'United States'\n        },\n        'comments': [ '@GerardMaras Rock the shrimp bouillabaisse!' ],\n        'active': True,\n        'rating': 8,\n        'reference': None,\n        'userID': 'gY3Cv81QwL0Fs',\n        'emoticon': 'aGFwcHk=',\n    },\n    'input_path': '.',\n    'input_criteria': {\n        'required_field': True,\n        'value_datatype': 'map',\n        'maximum_scope': [ 'datetime', 'address', 'active', 'userID', 'comments', 'rating', 'emoticon' ],\n        'extra_fields': False\n    },\n    'failed_test': 'extra_fields',\n    'error_value': 'extraKey',\n    'error_code': 4003\n}",
            "title": "Error Handling"
        },
        {
            "location": "/reference/#order-of-exceptions",
            "text": "The validation process will raise an error as soon as it encounters one, so there is no guarantee that the error that is reported is the only error in the input. Since there is no set order to the keys in a dictionary, there is also no guaranteed a priori order to the evaluation process. However below is an overview of the order of the steps of the validation process:  Structure:    Input is a dictionary  Required keys in the input  Extra keys in the input  Value of each key in the input (recursive)  (see below)  Inject default values for missing optional keys   Values (or Items):    Datatype of value  Other value qualifiers based upon datatype  Identity, Lambda and URL qualifiers #  TODO   To help the process of error handling and client-server negotiation, both the schema for the model as well as the the map of conditional qualifiers for the field that raised the error are included in the error dictionary.",
            "title": "Order of Exceptions"
        },
        {
            "location": "/reference/#ingesting-kwargs",
            "text": "The process of ingestion recursively walks the valid model searching for key-value pairs which match the keyword arguments of the input. For each match it finds, it constructs a key-value pair in the dictionary using the following rules (in order):   Value in kwargs if field passes all its component validation tests  Default value declared for the key in the model  Empty value appropriate to datatype of key in the model   Like the core validation method, ingestion will also walk through each item in a list field of the kwargs if the item type itself is also a list or dictionary. However, because invalid data will be replaced by empty values appropriate to the datatype declared in the model, unlike the core validation model, output data from ingest may not be model valid data. If it is desirable to ensure that the data is valid, a \u2018default_value\u2019 should be declared for each key in the components section of the data model and the \u2018min_size\u2019 of each list declaration should only be set to 0.  Sample Kwargs ::  {\n    \"userID\": \"6nPbM9gTwLz3f\",\n    \"datetime\": 1449179763.312077,\n    \"active\": false,\n    \"emoticon\": \"aGFwcHIk=\",\n    \"comments\": [ \"gold\", \"silver\", \"bronze\", \"pewter\" ],\n    \"address\": {\n        \"region\": \"NY\",\n        \"country\": \"United States\"\n  }\n}  Ingest Sample ::  output = jsonModel.ingest(**sample_kwargs)  Sample Output ::  {\n    'userID': '6nPbM9gTwLz3f',\n    'datetime': 1449179763.312077,\n    'active': False,\n    'rating': 5,\n    'reference': None,\n    'emoticon': 'aGFwcHIk='\n    'comments': ['gold', 'silver', 'bronze'],\n    'address': {\n        'postal_code': '',\n        'city': 'New York',\n        'country_code': 0,\n        'region': 'NY',\n        'country': 'United States'\n    }\n}  Ingest Empty ::  output = jsonModel.ingest(**{})  Empty Output ::  {\n    'userID': '',\n    'datetime': 0.0,\n    'active': False,\n    'rating': 5,\n    'reference': None,\n    'emoticon': ''\n    'comments': [],\n    'address': {\n        'postal_code': '',\n        'city': 'New York',\n        'country_code': 0,\n        'region': '',\n        'country': ''\n    }\n}",
            "title": "Ingesting Kwargs"
        },
        {
            "location": "/reference/#extra-keywords",
            "text": "If \u2018extra_fields\u2019 is declared True in the components for a dictionary in the model, then any extraneous keys in the corresponding dictionary in the kwargs will be added to the output.",
            "title": "Extra Keywords"
        },
        {
            "location": "/reference/#too-many-items",
            "text": "Items are only added to a list from those items in kwargs if they are valid. If the number of valid items in a list in the kwargs exceeds the \u2018max_size\u2019 of the corresponding list in the model, then subsequent items are not added to the list once the list reaches its maximum size.",
            "title": "Too Many Items"
        },
        {
            "location": "/reference/#query-criteria",
            "text": "Query criteria are composed of a dictionary of one or more key-value pairs, where the key names are the dot path to the fields in the model schema to be queried and the values are dictionaries containing all the conditional operators for the query on the respective fields. Query criteria can be simple, such as the single field, operator and qualifier in the README documentation, or elaborate, such as found in the provided model sample-query.json below:  Sample Query ::  {\n  \".address.city\": {\n    \"discrete_values\": [ \"New Orleans\", \"New York\", \"Los Angeles\", \"Miami\"]\n  },\n  \".address.country_code\": {\n    \"discrete_values\": [36, 124, 554, 826, 840],\n    \"integer_data\": true\n  },\n  \".address.region\": {\n    \"contains_either\": [\"[A-Z]{2}\", \"[A-Z][a-z]+\"],\n    \"greater_than\": \"AB\",\n    \"less_than\": \"Yyyyyyyyyyyyyyyyyyyyyyyy\"\n  },\n  \".comments\": {\n    \"max_size\": 3,\n    \"min_size\": 1,\n    \"unique_values\": true\n  },\n  \".comments[0]\": {\n    \"max_length\": 140,\n    \"must_contain\": [\"[a-zA-Z]{2,}\"]\n  },\n  \".datetime\": {\n    \"greater_than\": 1.1,\n    \"less_than\": 2000000000.0\n  },\n  \".emoticon\": {\n    \"byte_data\": true,\n    \"excluded_values\": [\"c2Fk\"]\n  },\n  \".rating\": {\n    \"excluded_values\": [7, 9],\n    \"integer_data\": true,\n    \"max_value\": 10,\n    \"min_value\": 1\n  },\n  \".userID\": {\n    \"max_length\": 13,\n    \"max_value\": \"yyyyyyyyyyyyy\",\n    \"min_length\": 13,\n    \"min_value\": \"1111111111111\",\n    \"must_not_contain\": [\"[^\\\\w]\", \"_\"]\n  }\n}  The query method follows a similar process by which input is validated. A record whose field values evaluate to true for all criteria returns true. Otherwise, something in the record does not match one or more query criteria and the query method returns false. Because the query method returns a false as soon as it encounters a failed criteria from a dictionary of fields in the query criteria, query time will vary based upon the number of records, how many fail and how many fields are added to the query criteria.",
            "title": "Query Criteria"
        },
        {
            "location": "/reference/#querying-items",
            "text": "Although the query method will evaluate items nested inside lists to an arbitrary depth, it does so by evaluating all items in the list and all sub-branches of any nested lists inside the list. As a result, querying items inside lists suffers non-linear explosion. And, unlike the process of item ingestion, if any item in a list (or branch of a sub-list) fails to evaluate to true to a criteria in the query, the entire record will return false.  Be Warned",
            "title": "Querying Items"
        },
        {
            "location": "/reference/#query-errors",
            "text": "If query criteria contain fields, operators or qualifiers which are outside the scope of the model, the query method will produce a QueryValidationError.  To handle a QueryValidationError::  try:\n    query_results = validModel.query(invalid_criteria, test_record)\nexcept QueryValidationError as err:\n    assert isinstance(err.error['message'], str)",
            "title": "Query Errors"
        },
        {
            "location": "/reference/#query-rules-customization",
            "text": "When the model is initialized, it accepts an optional dictionary for customized query rules. The primary purpose of this customization is to limit query criteria validation to only those query operations which are supported by a specific query engine. Optional query rules must be structured according to the components field of the model-rules.json file and cannot contain any fields, operators or qualifiers outside the full range of the model query rules.  Query Rules ::  {\n  \".boolean_fields\": {\n    \"identical_to\": \".similar_boolean\",\n    \"lambda_function\": \"\",\n    \"validation_url\": \"\",\n    \"value_exists\": false\n  },\n \".list_fields\": {\n    \"identical_to\": \".similar_list\",\n    \"lambda_function\": \"\",\n    \"max_size\": 0,\n    \"min_size\": 0,\n    \"unique_values\": false,\n    \"validation_url\": \"\",\n    \"value_exists\": false\n },\n \".map_fields\": {\n    \"identical_to\": \".similar_map\",\n    \"lambda_function\": \"\",\n    \"validation_url\": \"\",\n    \"value_exists\": false\n },\n \".null_fields\": {\n    \"identical_to\": \".similar_null\",\n    \"lambda_function\": \"\",\n    \"validation_url\": \"\",\n    \"value_exists\": false\n },\n \".number_fields\": {\n    \"discrete_values\": [],\n    \"excluded_values\": [],\n    \"greater_than\": 0.0,\n    \"identical_to\": \".similar_number\",\n    \"integer_data\": false,\n    \"lambda_function\": \"\",\n    \"less_than\": 0.0,\n    \"max_value\": 0.0,\n    \"min_value\": 0.0,\n    \"validation_url\": \"\",\n    \"value_exists\": false\n },\n  \".string_fields\": {\n    \"byte_data\": false,\n    \"contains_either\": [],\n    \"discrete_values\": [],\n    \"excluded_values\": [],\n    \"greater_than\": \"\",\n    \"identical_to\": \".similar_string\",\n    \"lambda_function\": \"\",\n    \"less_than\": \"\",\n    \"max_length\": 0,\n    \"max_value\": \"\",\n    \"min_length\": 0,\n    \"min_value\": \"\",\n    \"must_contain\": [],\n    \"must_not_contain\": [],\n    \"validation_url\": \"\",\n    \"value_exists\": false\n  }\n}  [The lambda_function, identical_to and validation_url operators are not yet supported by the model.]  A malformed query rules argument on model initialization will produce a ModelValidationError.",
            "title": "Query Rules Customization"
        },
        {
            "location": "/roadmap/",
            "text": "Roadmap\n\n\nFeatures\n\n\n\n\nValidates native json datatypes\n\n\nValidates byte data as base64 encoded strings\n\n\nAlternative to json schema module\n\n\nSchema declaration is self-valid\n\n\nBuilt-in validation of model declaration\n\n\nFlat structure to object property attribute declarations\n\n\nAbility to assign default values to inputs\n\n\nValidates individual components in a model\n\n\nIngests arbitrary keyword data and outputs model valid dictionary\n\n\nValidates query criteria against model scope\n\n\nEvaluates model valid records using query criteria\n\n\n\n\nNothin\u2019 Yet\n\n\nRoadmap to infinity\u2026",
            "title": "Roadmap"
        },
        {
            "location": "/roadmap/#roadmap",
            "text": "",
            "title": "Roadmap"
        },
        {
            "location": "/roadmap/#features",
            "text": "Validates native json datatypes  Validates byte data as base64 encoded strings  Alternative to json schema module  Schema declaration is self-valid  Built-in validation of model declaration  Flat structure to object property attribute declarations  Ability to assign default values to inputs  Validates individual components in a model  Ingests arbitrary keyword data and outputs model valid dictionary  Validates query criteria against model scope  Evaluates model valid records using query criteria",
            "title": "Features"
        },
        {
            "location": "/roadmap/#nothin-yet",
            "text": "Roadmap to infinity\u2026",
            "title": "Nothin' Yet"
        }
    ]
}